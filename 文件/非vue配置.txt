button 按钮的 type 类型
{
	primary : 蓝色,
	success : 绿色,
	info : 石灰色,
	warning : 橘黄色,
	danger : 粉红
}

###################################################################

form表单相关

结构

<el-form>
    <el-form-item>
    	<el-input></el-input>
	<el-button></el-button>
    </el-form-item>
</el-form>

##############################################################

el-form 说明

<el-form ref="form" :model="form" label-width="80px" :rules="loginFormRules">
ref:	是一个固定的属性，使得我们可以通过 this.$refs.form 的方式获得当前的“组件”，该组件代表的是组件对象，这个对象可以调用el-form组件内部的data或methods成员
:model  属性绑定，与v-model没有关系，作用：收集全部的表单信息
label-width  设定表单域名称宽度
:rules 	绑定校验规则，必须同时绑定:model才可正常使用，不绑定:model一直提示校验失败； prop指定校验的校验规则
  
  <el-form-item label="活动名称" prop="name">
  label:设置当前表单域前边显示的名称
  prop: 指定校验的校验规则
  
    <el-input v-model="form.name"></el-input>
    表单域项目
    v-model：双向数据绑定，用以 显示 或 收集 用户输入的信息
             该属性绑定的是form对象的name成员，其他表单域都是这种方式绑定，最后全部的表单域信息就收集在form对象里边了
      
<span ref="xx" id="yy"></span>
document.getElementById('yy')  	获得span的dom对象
this.$refs.xx       		获得span的dom对象
this.$refs.loginFormRef.validate((valid)=>{})	 validate 方法是 el-form表单自带的整体校验

###################################################################

第一种校验规则  校验名称(来自表单对象的成员名字) 允许多个校验规则

1.表单绑定校验规则	el-form		:rules="loginFormRules"  

2.表单选项绑定prop属性  el-form-item	prop="表单对象成员mobile/code"

3.收集数据		el-input	v-model=""

4.设置校验规则

是否输入内容校验   { required: true, message: '手机号码必填', trigger: 'blur' }

			required:必填, 强制要求校验
			message:校验错误提示
			trigger:校验触发机制

输入内容格式校验   { validator: 校验器, trigger: 校验触发机制blur / change }

	  	   validator: 根据谁校验 
	  	   校验器: data中定义的一个方法 fn= function(rule, value, callback) { 关键方法callback(); value被校验的数据 }


	mobile: [
			{ required: true, message: '手机号码必填', trigger: 'blur' },
			{ validator: fn, trigger: blur / change }
		]

###########################################################################

第二种登录校验  el-form组件本身可以调用validate方法实现表单的整体校验
	ref="loginFormRef"	1.绑定对象
	this.$refs.loginFormRef.validate((valid)=>{})	2.通过$refs可以调用loginFormRef对象,然后再加上validate对当前el-form表单进行校验

###############################################################################################################################################

管理员登录成功后把token、名称、头像存储好
window.sessionStorage.setItem(名字", "保存的内容")  存储
window.sessionStorage.getItem('保存的内容')	获取

#############################################################################################################################################

极验-人机交互介绍

传统网站用户登录系统，输入正确的用户名、密码、校验码 就可以了


但是这样的网站容易被攻击，可以通过机器人输入 账号信息 也可以访问我们的系统


爬虫技术，利用机器代码登录系统(模拟登录)，并偷取网站的信息


网站：https://www.geetest.com/

人机交互效果本质是js代码的执行，相关js代码存储在一个名称为gt.js的文件里边

显示人机交互效果步骤：


1. 通过axios走指定的服务器接口获得“校验密码”信息

2. 通过gt.js文件提供的initGeeTest()函数显示交互窗口

3. 隐士动作，1的校验码 和 2的人的行为 一并提交给 极验 服务器做认证，之后返回结果


this.$refs.loginFormRef.validate(valid => {
    if (valid) {  验证成功执行下面代码
    // 1) 获得验证的秘钥信息
    this.$http.get(`/captchas/${this.loginForm.mobile}`).then((result) => {
	// 从result中把相关的信息解构出来
        let { data } = result.data
        // 显示人机窗口
        // 请检测data的数据结构， 保证data.gt, data.challenge, data.success有值
        window.initGeetest({
        // 以下配置参数来自服务端 SDK
           gt: data.gt,
           challenge: data.challenge,
           offline: !data.success,
           new_captcha: true,
           product: 'bind' // 隐藏"人机按钮"
        }, captchaObj => {
            // 这里可以调用验证实例 captchaObj 的实例方法
            captchaObj.onReady(() => {
            // 验证码ready之后才能调用verify方法“显示验证码”
            captchaObj.verify() // 显示验证码
        }).onSuccess(() => {
            // 人机验证成功
            // 验证账号登录系统
            this.loginAct()
        }).onError(() => {
            // 人机验证失败
        })})}).catch((err) => {
              console.log(err)
              return this.$message.error('获得人机验证码失败！')
        })
    }
}

#######################################################################################################################################

极验-处理重复创建dom问题

1. 创建data成员 catpchaObject

2. 把第一次生成的catpchaObj窗口对象 赋予给 catpchaObject

3. 每次显示人机窗口之前先判断是否存在，存储就直接使用即可


########################################################################################################################################

iconfont图标

<i slot="prefix" class="iconfont icon-yanzhengma"></i>

##########################################################

在响应拦截器之前做数据转换  

json-bigint 大数字处理组件

1. 下载安装  yarn add json-bigint
2. 在应用中引入var JSONBig from 'json-bigint'
3. 具体使用
   	JSONBig.parse(字符串对象)   // 可以把大型数字的字符串对象 变为 表达式对象
   	JSONBig.stringify(表达式对象)  // 把大型数字的表达式对象 变为 字符串对象
4.  axios从服务器端获取回来的信息本身是一个  字符串对象(有可能拥有大数字)
    如果不通过JSONBig.parse()处理，系统默认通过 JSON.parse处理，就错误了
5.  在响应拦截器之前有一个数据转换 在这里进行大数字转换
	Axios.defaults.transformResponse = [function (data) {
	    // 对服务器返回的最初数据做大数字处理  json-bigint
	    if (data) {
	        return JSONBig.parse(data);
	    } else {
	        return data;
	    }
	}];

##################################################################################################################################

幅文本编辑器	vue-quill-editor

// 按需引入幅文本编辑器
import { quillEditor } from 'vue-quill-editor';

// 导入富文本编辑器相关
import 'quill/dist/quill.core.css';
import 'quill/dist/quill.snow.css';
import 'quill/dist/quill.bubble.css';












